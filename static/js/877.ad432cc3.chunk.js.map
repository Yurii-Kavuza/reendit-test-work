{"version":3,"file":"static/js/877.ad432cc3.chunk.js","mappings":"uOAyCA,EAnCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcN,GACXO,KAAKH,GACLI,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACT,IAECG,GAKH,SAACS,EAAA,EAAD,CAAKC,GAAG,KAAKC,QAAQ,OAAOC,cAAc,SAASC,QAAS,EAA5D,SACGb,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,cAAeC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,UAA1C,OACR,yBACE,UAACV,EAAA,EAAD,CAAKE,QAAQ,OAAOC,cAAc,SAASC,QAAS,EAApD,UACGK,IACC,gBACEE,IAAG,UAAKC,EAAAA,GAAL,YAAgBC,EAAAA,GAAhB,YAAyBJ,GAC5BK,IAAG,OAAEP,QAAF,IAAEA,EAAAA,EAAQC,EACbO,MAAM,QAGV,gCAAMR,QAAN,IAAMA,EAAAA,EAAQC,KACd,yCAAiBE,SAVZJ,EADD,MALL,IAsBV,C,mPCrCKU,EAAU,mCAIHJ,EAAU,6BACVC,EAAQ,OAErBI,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAmB,mCAAG,oGACVD,EAAAA,EAAAA,IAAA,WATR,WASQ,YARN,QAQM,YAPL,QAShB,CACEE,OAAQ,CACNC,QAASJ,KALkB,cAC3BK,EAD2B,yBAS1BA,EAASC,KAAKC,SATY,2CAAH,qDAYnBC,EAAc,mCAAG,WAAMlB,GAAN,uFACRW,EAAAA,EAAAA,IAAA,iBAAoBX,GAAM,CAC5Ca,OAAQ,CACNC,QAASJ,KAHe,cACtBS,EADsB,yBAMrBA,EAAMH,MANe,2CAAH,sDASd5B,EAAa,mCAAG,WAAMY,GAAN,uFACPW,EAAAA,EAAAA,IAAA,iBAAoBX,EAApB,YAAkC,CACpDa,OAAQ,CACNC,QAASJ,KAHc,cACrBS,EADqB,yBAMpBA,EAAMH,KAAK/B,MANS,2CAAH,sDASbmC,EAAe,mCAAG,WAAMpB,GAAN,uFACTW,EAAAA,EAAAA,IAAA,iBAAoBX,EAApB,YAAkC,CACpDa,OAAQ,CACNC,QAASJ,KAHgB,cACvBS,EADuB,yBAMtBA,EAAMH,KAAKC,SANW,2CAAH,sDASfI,EAAyB,mCAAG,WAAMC,GAAN,uFACnBX,EAAAA,EAAAA,IAAA,gBAA2B,CAC7CE,OAAQ,CACNC,QAASJ,EACTa,MAAOD,KAJ4B,cACjCH,EADiC,yBAOhCA,EAAMH,KAAKC,SAPqB,2CAAH,qD","sources":["components/Cast/Cast.jsx","services/fetchMoviesApi.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchCastById } from 'services/fetchMoviesApi';\nimport { IMG_URL, WIDTH } from 'services/fetchMoviesApi';\nimport Box from 'components/Box';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    fetchCastById(movieId)\n      .then(setCast)\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <Box as=\"ul\" display=\"flex\" flexDirection=\"column\" gridGap={5}>\n      {cast.map(({ id, name, original_name, profile_path, character }) => (\n        <li key={id}>\n          <Box display=\"flex\" flexDirection=\"column\" gridGap={3}>\n            {profile_path && (\n              <img\n                src={`${IMG_URL}/${WIDTH}/${profile_path}`}\n                alt={name ?? original_name}\n                width=\"80\"\n              />\n            )}\n            <div>{name ?? original_name}</div>\n            <div>Character: {character}</div>\n          </Box>\n        </li>\n      ))}\n    </Box>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'd984b4c758c2885930eb52b6130716de';\nconst TRENDING = 'trending';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'week';\nexport const IMG_URL = 'https://image.tmdb.org/t/p';\nexport const WIDTH = 'w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `/${TRENDING}/${MEDIA_TYPE}/${TIME_WINDOW}`,\n    {\n      params: {\n        api_key: API_KEY,\n      },\n    }\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const movie = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return movie.data;\n};\n\nexport const fetchCastById = async id => {\n  const movie = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return movie.data.cast;\n};\n\nexport const fetchReviewById = async id => {\n  const movie = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return movie.data.results;\n};\n\nexport const fetchReviewBySearchedWord = async word => {\n  const movie = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: word,\n    },\n  });\n  return movie.data.results;\n};\n"],"names":["movieId","useParams","useState","cast","setCast","useEffect","fetchCastById","then","catch","error","console","log","Box","as","display","flexDirection","gridGap","map","id","name","original_name","profile_path","character","src","IMG_URL","WIDTH","alt","width","API_KEY","axios","fetchTrendingMovies","params","api_key","response","data","results","fetchMovieById","movie","fetchReviewById","fetchReviewBySearchedWord","word","query"],"sourceRoot":""}